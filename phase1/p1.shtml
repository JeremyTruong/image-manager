<!DOCTYPE html>
<html>
    <head>
        <meta name="generator" content="HTML Tidy for HTML5 (experimental) for Mac OS X https://github.com/w3c/tidy-html5/tree/c63cc39">
        <meta charset="UTF-8"><!-- <link rel="stylesheet" href="http://www.cdf.toronto.edu/~csc207h/fall/styles.css" type="text/css"> -->
        <title>
            CSC207: Project Phase 1 Introduction
        </title>
    </head>
    <body>
        <div class="title">
            <h1>
                CSC207: Project Phase 1 Introduction
            </h1>
        </div>
        <h2>
            The lab
        </h2>
        <p>
            With your project group, do a CRC analysis of the project described here (except the Graphical User Interface (GUI)). You will be required to make good progress through the lab (your TA will monitor you and help if you're stuck), so make sure they include both responsibilities (written in English rather than code!) and collaborations. You don't have to finish, but you need to have made good progress to earn the lab mark.
        </p>
        <h2>
            Learning objectives
        </h2>
        <ul>
            <li>Do a CRC design
            </li>
            <li>Use Git in a group setting
            </li>
            <li>Build a graphical user interface using JavaFX
            </li>
            <li>Write a "real" application
            </li>
            <li>Design and work with configuration files
            </li>
            <li>Implement a logging system
            </li>
            <li>Work with all Java features seen so far
            </li>
            <li>Work in an environment where not everything is specified
            </li>
        </ul>
        <h2>
            Overview
        </h2>
        <p>
            This project description is a first introduction to the project. Over time, the specifications will be tightened up, and phase 2 will have a more complete set of requirements.
        </p>
        <p>
            Many photo management programs (such as Google Photos and Apple iPhoto) allow you to tag images so that you can find them later. An issue with these applications is that they require you to use the application to view and search your photo collection.
        </p>
        <p>
            There are also <a href="https://www.shrm.org/ResourcesAndTools/hr-topics/technology/Pages/Facial-Recognition-Privacy.aspx">privacy issues</a> revolving around <a href="http://www.bbc.com/news/technology-33199275">face recognition</a>. Both <a href="http://www.cbc.ca/news/technology/google-s-foray-into-face-recognition-raises-privacy-concerns-1.1004190">Google</a> and <a href="https://www.pcworld.com/article/230656/face_recognition_and_facebooks_recurring_privacy_problem.html">Facebook</a> do automatic face recognition.
        </p>
        <h2>
            Phase 1: an alternative approach
        </h2>
        <p>
            Here's a description of an alternative local approach that you will design and implement, without the face recognition. Your group will design and write a JavaFX program that lets users rename image files based on a set of tags the user chooses. In the filename, tags are separated by spaces and are marked with the letter <code>'@'</code>.
        </p>
        <p>
            The user wants to be able to choose a directory and view a list of all image files anywhere under that directory, and also show a list of images in that directory. When viewing an image, the user can select tags from the currently-existing tags, and the user can also add new tags and delete existing ones from the currently-existing ones. The application will rename the image file to include the tags, each prefixed with the "@" character. For example, if the user has tagged an image with "Aunt June" and "Samantha", then the file will be renamed to include "@Aunt June @Samantha". This allows the user to use their operating system to search for image files. The user should also be able to open (directly in their OS's file viewer) the directory containing the current image file.
        </p>
        <p>
            The user should be able to move a file to another directory.
        </p>
        <p>
            The user wants to be able to go back to older sets of tags for a particular file. Provided that an image has not been manually moved or renamed using the OS, the user can view all the names that a file has had. For example, if the user views the image with Aunt June and Samantha, they can choose to view both the original name and the name that includes "@Aunt June @Samantha". The user can choose to go back to an older name.
        </p>
        <p>
            The list of available tags persists when the application is quit and reopened.
        </p>
        <p>
            The user wants a log of all renaming ever done (old name, new name, and timestamp).
        </p>
        <p>
            When the program is first run, it should create any configuration files that it needs, and if they are deleted it should recreate them the next time it is run.
        </p>
        <h2>
            Getting set up
        </h2>
        <p>
            You have a shared repository whose name is your group name. For example, if your group name is <code>group_4321</code>, then your repository URL will be <code>https://markus.teach.cs.toronto.edu/git/csc207-2017-09/group_4321</code>.
        </p>
        <p>
            Your repo has a <code>phase1</code> subdirectory with this file inside. Create a new IntelliJ project inside it. This will automatically create a <code>src</code> subdirectory. Create any packages you like.
        </p>
        <p>
            Only add and commit your <code>.java</code> files and any text files you create. <strong style="font-size: 1.5em">In particular, do not add or commit the <code>out</code> directory, nor any other automatically-generated files created by your IDE.</strong> You <strong>can</strong> add other subdirectories and files for things like unit tests and a TODO list.
        </p>
        <h3>
            Citing code
        </h3>
        <p>
            There are plenty of tutorials for viewing images in JavaFX. If you use any code you find, cite it according to the format described in the <a href="http://integrity.mit.edu/handbook/writing-code">"Examples of citing code sources" section of the "Writing Code" page of the MIT Academic Integrity handbook</a>.
        </p>
        <h2>
            A few tips
        </h2>
        <p>
            Keep your graphical user interface code separate from the "back end" of the system that manipulates and manages the files. To help with this, imagine that your program will work with either a GUI program or a command-line shell written in Java: they are completely different kinds of user interfaces, but the classes that manage the data should not have to change for that to work.
        </p>
        <p>
            The user is likely to add further requirements over the next month or so. The requests might involve expanding your software to include better tag manipulation. Be sure to design your code with this in mind.
        </p>
        <p>
            Your user interface doesn't have to be pretty, but it does have to be functional and usable.
        </p>
        <h2>
            What to submit
        </h2>
        <p>
            As you work, regularly commit and push your changes. We will be checking the git logs to make sure everyone is making a significant contribution.
        </p>
        <p>
            Your code should be platform agnostic: it must run on any operating system that has the Java 8 VM installed.
        </p>
    </body>
</html>
